#!/usr/bin/env node

/**
 * A1 Support Dashboard - Email Setup Script
 * 
 * This script helps you configure IMAP credentials for email processing
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (query) => new Promise((resolve) => rl.question(query, resolve));

async function setupEmail() {
  console.log('üöÄ A1 Support Dashboard - Email Setup');
  console.log('=====================================\n');
  
  console.log('This script will help you configure IMAP credentials for email processing.\n');
  
  // Check if .env file exists
  const envPath = path.join(__dirname, '.env');
  const envExists = fs.existsSync(envPath);
  
  if (envExists) {
    console.log('‚ö†Ô∏è  .env file already exists. This will add/update email settings.\n');
  }
  
  try {
    // Get email provider
    console.log('Select your email provider:');
    console.log('1. Gmail (recommended)');
    console.log('2. Outlook/Hotmail');
    console.log('3. Custom IMAP server');
    console.log('4. Skip setup (demo mode)\n');
    
    const provider = await question('Enter your choice (1-4): ');
    
    if (provider === '4') {
      console.log('\n‚úÖ Skipping email setup. System will run in demo mode.');
      rl.close();
      return;
    }
    
    let imapConfig = {};
    
    switch (provider) {
      case '1':
        imapConfig = {
          host: 'imap.gmail.com',
          port: '993',
          smtpHost: 'smtp.gmail.com',
          smtpPort: '587'
        };
        console.log('\nüìß Gmail Configuration');
        console.log('Note: You need to enable 2FA and create an App Password');
        console.log('See: https://support.google.com/accounts/answer/185833\n');
        break;
        
      case '2':
        imapConfig = {
          host: 'outlook.office365.com',
          port: '993',
          smtpHost: 'smtp-mail.outlook.com',
          smtpPort: '587'
        };
        console.log('\nüìß Outlook Configuration');
        break;
        
      case '3':
        imapConfig.host = await question('IMAP Host: ');
        imapConfig.port = await question('IMAP Port (default 993): ') || '993';
        imapConfig.smtpHost = await question('SMTP Host: ');
        imapConfig.smtpPort = await question('SMTP Port (default 587): ') || '587';
        break;
        
      default:
        console.log('‚ùå Invalid choice. Exiting.');
        rl.close();
        return;
    }
    
    // Get credentials
    const email = await question(`Email address: `);
    const password = await question(`Password (or App Password for Gmail): `);
    
    if (!email || !password) {
      console.log('‚ùå Email and password are required. Exiting.');
      rl.close();
      return;
    }
    
    // Create .env content
    const envContent = `# A1 Support Dashboard - Environment Configuration
# Generated by setup-email.js on ${new Date().toISOString()}

# JWT Secret
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# Email Processing Configuration
IMAP_HOST=${imapConfig.host}
IMAP_PORT=${imapConfig.port}
IMAP_USER=${email}
IMAP_PASSWORD=${password}
IMAP_REJECT_UNAUTHORIZED=false

# SMTP Configuration
SMTP_HOST=${imapConfig.smtpHost}
SMTP_PORT=${imapConfig.smtpPort}
SMTP_USER=${email}
SMTP_PASSWORD=${password}

# Email Check Interval (30 seconds)
EMAIL_CHECK_INTERVAL=30000

# Server Configuration
PORT=3000
NODE_ENV=development
`;
    
    // Write .env file
    fs.writeFileSync(envPath, envContent);
    
    console.log('\n‚úÖ Email configuration saved to .env file');
    console.log('\nüìã Next steps:');
    console.log('1. Restart the server: npm run start-simple');
    console.log('2. Login as Master Admin and go to Email Processing');
    console.log('3. Configure tenant domains for email processing');
    console.log('4. Test with the email processing test form');
    
    if (provider === '1') {
      console.log('\nüîê Gmail Security Reminder:');
      console.log('- Use App Passwords, not your regular password');
      console.log('- Enable 2-Factor Authentication');
      console.log('- Keep your App Password secure');
    }
    
  } catch (error) {
    console.error('‚ùå Error during setup:', error.message);
  } finally {
    rl.close();
  }
}

// Run setup if called directly
if (require.main === module) {
  setupEmail();
}

module.exports = { setupEmail };
